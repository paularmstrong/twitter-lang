#!/usr/bin/env node

import { safeLoad as yaml } from 'js-yaml';
import fs from 'fs';
import https from 'https';
import mkdirp from 'mkdirp';
import Path from 'path';

const files = {
  'extract.yml': {
    transforms: {
      cashtags: '(output) => output.entities.symbols.map((symbol) => symbol.text)',
      cashtags_with_indices: '(output) => output.entities.symbols.reduce((state, { text, ...rest }) => [...state, { cashtag: text, ...rest }], [])',
      hashtags: '(output) => output.entities.hashtags.map((hashtag) => hashtag.text)',
      hashtags_from_astral: '(output) => output.entities.hashtags.map((hashtag) => hashtag.text)',
      hashtags_with_indices: '(output) => output.entities.hashtags.reduce((state, { text, ...rest }) => [...state, { hashtag: text, ...rest }], [])',
      mentions: '(output) => output.entities.user_mentions.map((mention) => mention.screen_name)',
      mentions_or_lists_with_indices: '(output) => output.entities.user_mentions.map((mention) => ({ list_slug: "", ...mention }))',
      mentions_with_indices: '(output) => output.entities.user_mentions',
      urls: '(output) => output.entities.urls.map((url) => url.url)',
      urls_with_indices: '(output) => output.entities.urls'
    },
    ignore: [
      'replies' // Mentions covers all cases of replies. We don't do any special output/handling for reply vs mention
    ]
  }
};

const writeTest = (suite, tests, transform, directory) => {
  const header = [
    '/* eslint-env jest */',
    '/* eslint-disable max-len */',
    'import { parse } from \'../../..\';',
    (transform && ''),
    (transform && `const transform = ${transform};`),
    `\ndescribe('${suite}', () => {`
  ];

  const footer = [
    '/* eslint-enable max-len */',
    '});'
  ]

  const content = tests.reduce((state, { description, text, expected }) => {
    return [
        ...state,
        `
  it(${JSON.stringify(description)}, () => {
    const actual = parse(${JSON.stringify(text)});
    const expected = ${JSON.stringify(expected)};
    expect(${transform ? 'transform(actual)' : 'actual'}).toEqual(expected);
  });`
      ];
  }, []);

  fs.writeFileSync(
    Path.join(directory, `${suite}.test.js`),
    [...header, ...content, '', ...footer].filter(line => line != null).join('\n')
  );
};

Object.entries(files).forEach(([ file, { transforms, ignore } ]) => {
  const directory = Path.join(__dirname, '..', 'test', 'conformance', Path.basename(file, '.yml'));
  mkdirp.sync(directory);

  https.get(`https://raw.githubusercontent.com/twitter/twitter-text/master/conformance/${file}`, (response) => {
    let contents = '';
    response.on('data', (buffer) => {
      if (buffer) {
        contents += buffer.toString('utf8');
      }
    });

    response.on('end', () => {
      // There's a weird bug in pulling the yaml file that converts some characters incorrectly
      const { tests: suites } = yaml(contents.replace(/���/g, '各'));
      Object.entries(suites).forEach(([ suite, tests ]) => {
        if (ignore.indexOf(suite) !== -1) {
          return;
        }
        return writeTest(suite, tests, transforms[suite], directory);
      });
    });
  });
});
